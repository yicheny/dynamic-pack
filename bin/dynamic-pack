#!/usr/bin/env node

'use strict';

const argv = require('minimist')(process.argv.slice(2));
const colors  = require('colors/safe');
const path = require('path');
const fs = require('fs')

process.title ='dynamic-pack'

const print = createPrint();
const root = {};

if(argv.h || argv.help) printHelpInfo();
if(argv.v || argv.version) printVersion();
if(argv.config) setByConfig();

    // if(argv.sourcefile) {
//     const rootPath = getWinPath(process.cwd());
//     const filePath = getWinPath(path.join(rootPath,argv.sourcefile));
//     // console.log('filePath',filePath);
//     tryExecute(()=>{
//         root.fileData = fs.readFileSync(filePath)
//         root.filePath = filePath;
//     });
// }
// if(argv.newfile){
//     if(!root.filePath) print.error('创建新文件必须输入源文件路径')
//     tryExecute(()=>fs.writeFileSync(argv.newfile,root.fileData));
// }

function printHelpInfo(){
    print.info(getHelpInfo());
    process.exit();

    function getHelpInfo(){
        return [
            'usage: dynamic-pack [path] [options]',
            '',
            'options',
            '-h --help              打印这个列表并退出',
            '-v --version           打印当前版本并退出',
            '   --config            读取配置'
        ].join('\n');
    }
}

function printVersion(){
    print.info('v' + require('../package.json').version);
    process.exit();
}

function setByConfig(){
    const config = require(getAbsoluteFilePath(argv.config));
    const classify = config.classify;
    const classifyConfig = config.classifyConfig[classify];
    setMainPanel(classifyConfig);
    setModule(classifyConfig.moduleConfig)

    function setMainPanel(config){
        const sourceFile = readFile(getAbsoluteFilePath(config.sourceFile));
        fs.writeFileSync(getAbsoluteFilePath(config.targetFile),sourceFile);
    }

    function setModule(configList){
        if(!Array.isArray(configList)) return null;
        configList.forEach((c)=>{
            const filePath = getAbsoluteFilePath(c.filePath);
            let file = readFile(filePath);
            c.replaceModules.forEach(x=>{
                file = file.replace(x.source,x.target);
            });
            fs.writeFileSync(filePath,file)
        })
    }
}





//基础方法
function readFile(path){
    return fs.readFileSync(path,'utf-8');
}

function getAbsoluteFilePath(filePath){
    const rootPath = getWinPath(process.cwd());
    return getWinPath(path.join(rootPath,filePath));
}

function getWinPath(result){
    return result.replace(/\\/g, '/');
}

async function tryExecute(callback){
    try {
        return await callback();
    } catch (err) {
        print.error(err.message)
    }
}

function createPrint(){
    return {
        info(text){
            console.log(text)
        },
        error(text){
            console.log(colors.red(text))
        }
    }
}
