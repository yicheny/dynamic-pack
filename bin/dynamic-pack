#!/usr/bin/env node

'use strict';

const argv = require('minimist')(process.argv.slice(2));
const colors  = require('colors/safe');
const path = require('path');
const fs = require('fs');
const {exec} = require('child_process');



process.title ='dynamic-pack'

const print = createPrint();

if(argv.h || argv.help) printHelpInfo();
if(argv.v || argv.version) printVersion();
if(argv.config) setByConfig();



function printHelpInfo(){
    print.info(getHelpInfo());
    process.exit();

    function getHelpInfo(){
        return [
            'usage: dynamic-pack [path] [options]',
            '',
            'options',
            '-h --help              打印这个列表并退出',
            '-v --version           打印当前版本并退出',
            '   --config            读取配置'
        ].join('\n');
    }
}

function printVersion(){
    print.info('v' + require('../package.json').version);
    process.exit();
}

function setByConfig(){
    const config = require(getAbsoluteFilePath(argv.config));
    const classify = config.classify;
    const classifyConfig = config.classifyConfig[classify];
    setMainPanel(classifyConfig);
    setModule(classifyConfig.moduleConfig);
    exeScripts(config.afterScripts)

    function setMainPanel(config){
        const sourceFile = readFile(getAbsoluteFilePath(config.sourceFile));
        fs.writeFileSync(getAbsoluteFilePath(config.targetFile),sourceFile);
    }

    function setModule(configList){
        if(!Array.isArray(configList)) return null;
        configList.forEach((c)=>{
            const filePath = getAbsoluteFilePath(c.filePath);
            let file = readFile(filePath);
            c.replaceModules.forEach(x=>{
                file = file.replace(x.source,x.target);
            });
            fs.writeFileSync(filePath,file)
        })
    }

    function exeScripts(scripts){
        if(!Array.isArray(scripts)) return null;
        scripts.forEach((s)=>exec_order(s));
    }
}




//基础方法
function readFile(path){
    return fs.readFileSync(path,'utf-8');
}

function getAbsoluteFilePath(filePath){
    const rootPath = getWinPath(process.cwd());
    return getWinPath(path.join(rootPath,filePath));
}

function getWinPath(result){
    return result.replace(/\\/g, '/');
}

function createPrint(){
    return {
        info(text){
            console.log(text)
        },
        error(text){
            console.log(colors.red(text))
        }
    }
}

function exec_order(order, info = '') {
    let i = 1;
    const timeId = setInterval(() => {
        console.log(info, i++);
    }, 1000);

    return new Promise((resolve, reject) => {
        exec(order, (err, stdout, stderr) => {
            if (err) return reject(err);
            return resolve(stdout, stderr);
        });
    }).then((stdout, stderr) => {
        console.log('stdout', stdout);
        // console.log('stderr',stderr);
        clearInterval(timeId)
    }).catch(err => {
        console.log('err', err);
        clearInterval(timeId)
    });
}
